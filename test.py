from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import machinevision as mv
import FILTER as flt

# test itpl (2D-Interpolation)
# print(mv.itpl(0,1,0,1,0,1,2,3,[0.3, 0.7]))
# print(mv.itpl(0,1,0,1,0,1,3,2,[0.3, 0.7]))

# reading an Image
I_PIL = Image.open('cat.jpg')
I = np.array(I_PIL)
# plt.figure('Image')
# plt.imshow(I)
# plt.axis('off')
# plt.show()
# I_pil = Image.fromarray(np.uint8(I))
# I_pil.save('cat_save.png')

# test rgb2gray (colorful image to gray value image)
I_gray = mv.rgb2gray(I)
# plt.figure('Gray Image')
# plt.imshow(I_gray, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_gray_pil = Image.fromarray(np.uint8(I_gray))
# I_gray_pil.save('cat_gray.png')

# test imrotate (rotating an Image)
# I_rotate = mv.imrotate(I_gray, -np.pi/8)
# plt.figure('Rotate Image')
# plt.imshow(I_rotate, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_rotate_pil = Image.fromarray(np.uint8(I_rotate))
# I_rotate_pil.save('cat_rotate.png')

# test imscale (scaling an Image)
# I_scale = mv.imscale(I_gray, 0.8, 1.3)
# plt.figure('Scale Image')
# plt.imshow(I_scale, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_scale_pil = Image.fromarray(np.uint8(I_scale))
# I_scale_pil.save('cat_scale.png')

# test gammacorrection
# I_gamma_1 = mv.gammacorrection(I_gray, 4)
# I_gamma_2 = mv.gammacorrection(I_gray, 0.1)
# plt.figure('Gamma Correction')
# plt.subplot(1,2,1)
# plt.imshow(I_gamma_1, cmap = "gray")
# plt.axis('off')
# plt.subplot(1,2,2)
# plt.imshow(I_gamma_2, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_gamma_1_pil = Image.fromarray(np.uint8(I_gamma_1))
# I_gamma_2_pil = Image.fromarray(np.uint8(I_gamma_2))
# I_gamma_1_pil.save('I_gamma_1.png')
# I_gamma_2_pil.save('I_gamma_2.png')

# test histogramm
# H_1 = mv.histogramm(I_gamma_1)
# H_2 = mv.histogramm(I_gamma_2)
# H_3 = mv.histogramm(I_gray)
# plt.figure('Histogramm')
# plt.subplot(1,3,1)
# plt.bar(range(len(H_1)), H_1)
# plt.xlim((0, 255))
# plt.xticks([0, 32, 64, 96, 128, 160, 192, 224, 255])
# plt.subplot(1,3,2)
# plt.bar(range(len(H_2)), H_2)
# plt.xlim((0, 255))
# plt.xticks([0, 32, 64, 96, 128, 160, 192, 224, 255])
# plt.subplot(1,3,3)
# plt.bar(range(len(H_3)), H_3)
# plt.xlim((0, 255))
# plt.xticks([0, 32, 64, 96, 128, 160, 192, 224, 255])
# plt.show()

# test convolution
# filter = flt.sobel('x')
# I_filter = mv.conv(I_gray, filter, 'cor')
# plt.figure('I_Sobel')
# plt.imshow(I_filter, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_filter_pil = Image.fromarray(np.uint8(I_filter))
# I_filter_pil.save('cat_filter.png')

# test flt
I_PIL = Image.open('test.png')
I = np.array(I_PIL)
I_gray = mv.rgb2gray(I)

# motion_filter = flt.motionblur(20, np.pi*3/8)
# I_motion = mv.conv(I_gray, motion_filter)
# plt.figure('Motion Blur')
# plt.imshow(I_motion, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_motion_pil = Image.fromarray(np.uint8(I_motion))
# I_motion_pil.save('test_motion.png')

# gauss_filter = flt.gaussfilter(3,0.5)
# I_gauss = mv.conv(I_gray, gauss_filter)
# plt.figure('I_Gauss')
# plt.imshow(I_gauss, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_gauss_pil = Image.fromarray(np.uint8(I_gauss))
# I_gauss_pil.save('test_gauss.png')

# mean_filter = flt.meanfilter(5)
# I_mean = mv.conv(I_gray, mean_filter)
# plt.figure('I_mean')
# plt.imshow(I_mean, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_mean_pil = Image.fromarray(np.uint8(I_mean))
# I_mean_pil.save('test_mean.png')

# I_bilateral = flt.bilateralfilter(I_gray,3,7,20)
# plt.figure('I_bilateral')
# plt.imshow(I_bilateral, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_bilateral_pil = Image.fromarray(np.uint8(I_bilateral))
# I_bilateral_pil.save('test_bilateral.png')

# I_median = flt.medianfilter(I_gray,3)
# plt.figure('I_median')
# plt.imshow(I_median, cmap = "gray")
# plt.axis('off')
# plt.show()
# I_median_pil = Image.fromarray(np.uint8(I_median))
# I_median_pil.save('test_median.png')
